--------------------------------------------------------------------------
1.Laravel with Factory 

  

    public function definition(): array  
    {   
        
        $colorIds = Color::pluck('id')->toArray();   
        
       
        $numberOfColorsToSelect = rand(1, min(4, count($colorIds)));  
        
        // Select random color IDs and convert to array  
        $colors = collect($colorIds)->random($numberOfColorsToSelect)->all();
        $colorString = implode(',', $colors);  
    
        // Fetch category IDs from the database  
        $categoryIds = Category::pluck('id')->toArray();   
        $categoryId = collect($categoryIds)->random();  

    
        // Fetch brand IDs from the database  
        $brandIds = Brand::pluck('id')->toArray();   
        $brandId = collect($brandIds)->random(); 
    
        // Get current date in d-m-y format  
        $currentDate = Carbon::now()->format('d-m-y');  
    
        return [  
            "name" => $this->faker->text(20),  
            "price" => $this->faker->numberBetween(200, 1500),  
            "qty"   => $this->faker->numberBetween(5, 15),  
            "desc" => $this->faker->paragraph(100),  
            "category_id" => $categoryId,   
            "brand_id" => $brandId, 
            "color" => $colorString,  
            "user_id" => 1,  
            "created_at" => $currentDate, 
            "updated_at" => $currentDate, 
        ];
          
    }  


--------------------------------------------------------------------------

2.create a comparison of total sales for the current month

public function compareSales()  
{  
    // Get the current date and the previous month  
    $currentMonthStart = Carbon::now()->startOfMonth();  
    $currentMonthEnd = Carbon::now()->endOfMonth();  

    $previousMonthStart = Carbon::now()->subMonth()->startOfMonth();  
    $previousMonthEnd = Carbon::now()->subMonth()->endOfMonth();  

    // Get total sales for the current month  
    $currentMonthSales = Sale::whereBetween('created_at', [$currentMonthStart, $currentMonthEnd])  
        ->sum('amount');  // Assuming 'amount' is the field that represents the sale total  

    // Get total sales for the previous month  
    $previousMonthSales = Sale::whereBetween('created_at', [$previousMonthStart, $previousMonthEnd])  
        ->sum('amount');  

    return [  
        'current_month_sales' => $currentMonthSales,  
        'previous_month_sales' => $previousMonthSales,  
        'difference' => $currentMonthSales - $previousMonthSales,  
        'current_month' => $currentMonthStart->format('F Y'), // Formatted current month  
        'previous_month' => $previousMonthStart->format('F Y') // Formatted previous month  
    ];  
}

--------------------------------------------------------------------------

3.the last 1 of year

public function compareSalesLastYear()  
{  
    // Get the current month and year  
    $currentYear = Carbon::now()->year;  
    $currentMonth = Carbon::now()->month;  

    // Initialize an array to store sales data for the last 12 months  
    $salesData = [];  

    // Loop to get sales data for the last 12 months  
    for ($i = 0; $i < 12; $i++) {  
        // Calculate the month for the loop period (current month minus the loop index)  
        $month = Carbon::now()->subMonths($i);  
        
        // Get the start and end of the month  
        $monthStart = $month->startOfMonth();  
        $monthEnd = $month->endOfMonth();  

        // Get total sales for that month  
        $totalSales = Sale::whereBetween('created_at', [$monthStart, $monthEnd])  
            ->sum('amount');  // Assuming 'amount' is the field representing the total sale amount  
        
        // Store the sales amount with the formatted month name  
        $salesData[$month->format('F Y')] = $totalSales;  
    }  

    return $salesData; // This will return an array of sales data for the last 12 months  
}

--------------------------------------------------------------------------

4.with minutes time 
public function getSalesLast8Minutes()  
{  
    // Get the current time and subtract 8 minutes  
    $startTime = Carbon::now()->subMinutes(8);  
    $endTime = Carbon::now(); // Current time  

    // Query total sales within the last 8 minutes  
    $totalSales = Sale::whereBetween('created_at', [$startTime, $endTime])  
        ->sum('amount');  // Assuming 'amount' is the field representing total sales amount  

    return [  
        'total_sales' => $totalSales,  
        'start_time' => $startTime->toDateTimeString(), // Optional: return the start time  
        'end_time' => $endTime->toDateTimeString(), // Optional: return the end time  
    ];  
}

--------------------------------------------------------------------------

5.Model for create product
<div class="modal fade" id="createProduct" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true"> 
    <div class="modal-dialog" style="max-width: 80%;"> 
      <div class="modal-content"> 
        <div class="modal-header"> 
          <h1 class="modal-title fs-5" id="exampleModalLabel">Creatting User</h1> 
        </div> 
        <div class="modal-body"> 
            <form  class="formCreateUser" method="POST"> 
 
                <div class="row"> 
 
                    <div class="col-lg-8"> 
 
                        <div class="form-group"> 
                            <label for="title">Product Name</label> 
                            <input type="text" class="title form-control" name="title" required> 
                        </div> 
 
                        <div class="form-group"> 
                            <label for="name">Description</label> 
                            <textarea name="desc" id="desc" class="desc form-control" rows="10"></textarea> 
                        </div> 
 
                        <div class="form-group"> 
                            <label for="price">Product Price</label> 
                            <input type="text" class="price form-control" name="price" required> 
                        </div> 
 
                        <div class="form-group"> 
                            <label for="qty">Product Quantity</label> 
                            <input type="text" class="qty form-control"  name="qty" required> 
                        </div> 
 
                        <div class="form-group"> 
                            <label for="">Product Image</label> 
                            <input type="file" id="image" class="image form-control" multiple name="image[]" required> 
                            <button type="button" onclick="UploadImage('.formCreateUser')" class=" btn btn-primary upload_images">Uploads</button> 
                        </div>
                        
                        <div class="show-images row">
                          
                        </div>
     
                    </div> 
 
                    <div class="col-lg-4"> 
                        <div class="form-group"> 
                            <label for="">Category</label> 
                            <select name="category"  class="category form-control"> 
                            </select> 
                        </div> 
                     
 
                    <div class="form-group"> 
                        <label for="">Brand</label> 
                       
                        <select name="brand" id="brand" class="brand form-control"> 
                            
                        </select> 
                    </div> 
 
                    <div class="form-group"> 
                        <label for="">Color</label> 
                        <select name="color[]" id="color" style="width : 100%" class="color form-control" multiple ="multiple"> 
                      
                        </select> 
                    </div> 
 
                    <div class="form-group"> 
                        <label for="">Releated Product</label> 
                        <select name="reteated" id="reteated" class=" form-control"> 
                            <option value="">Select Color</option> 
                            <option value="">red</option> 
                        </select> 
                    </div> 
 
                    <div class="form-group"> 
                        <label for="">Status</label> 
                        <select name="status" id="status" class="status form-control"> 
                            <option value="1">Active</option> 
                            <option value="0">Block</option> 
                        </select> 
                    </div> 
 
                </div> 
 
 
                </div> 
 
            </form> 
        </div> 
        <div class="modal-footer"> 
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button> 
          <button onclick="StoreProduct('.formCreateUser')" type="button" class="btn btn-primary">Save</button> 
        </div> 
      </div> 
    </div> 
 </div>


--------------------------------------------------------------------------

6.Select 2 CDN 
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>


$('#mySelectDestrict').select2({  
    placeholder: 'Select options',  
    allowClear: true,  
    tags: true, 
});

--------------------------------------------------------------------------
  