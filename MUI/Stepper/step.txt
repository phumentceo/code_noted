import * as React from "react";  
import { useLocation, useNavigate } from "react-router-dom";  
import Box from "@mui/material/Box";  
import Stepper from "@mui/material/Stepper";  
import Step from "@mui/material/Step";  
import StepLabel from "@mui/material/StepLabel";  
import Button from "@mui/material/Button";  
import Typography from "@mui/material/Typography";  

const steps = [  
  "Login",  
  "Add Delivery Address",  
  "Order Summary",  
  "Payment"  
];  

export default function Checkout() {  
  const navigate = useNavigate();  
  const location = useLocation();  
  const querySearch = new URLSearchParams(location.search);  
  const step = querySearch.get('step'); 

  
  const [activeStep, setActiveStep] = React.useState(() => {  
    return step ? parseInt(step) : 0;  
  });  

  const [skipped, setSkipped] = React.useState(new Set());  

  const isStepSkipped = (step) => {  
    return skipped.has(step);  
  };  

  const handleNext = () => {  
    let newSkipped = skipped;  
    if (isStepSkipped(activeStep)) {  
      newSkipped = new Set(newSkipped.values());  
      newSkipped.delete(activeStep);  
    }  

    const nextStep = activeStep + 1;  
    setActiveStep(nextStep);  
    setSkipped(newSkipped);  
    
    // Update the URL to reflect the current step  
    navigate(`?step=${nextStep}`);  
  };  

  const handleBack = () => {  
    const prevStep = activeStep - 1;  
    setActiveStep(prevStep);  
    
    // Update the URL to reflect the current step  
    navigate(`?step=${prevStep}`);  
  };  
 
  const handleReset = () => {  
    setActiveStep(0);  
    navigate(`?step=0`);  
  };  

  return (  
    <div className="px-10 lg:px-20 mt-10">  
      <Box sx={{ width: "100%" }}>  
        <Stepper activeStep={activeStep}>  
          {steps.map((label, index) => {  
            const stepProps = {};  
            const labelProps = {};  
            if (isStepSkipped(index)) {  
              stepProps.completed = false;  
            }  
            return (  
              <Step key={label} {...stepProps}>  
                <StepLabel {...labelProps}>{label}</StepLabel>  
              </Step>  
            );  
          })}  
        </Stepper>  
        {activeStep === steps.length ? (  
          <React.Fragment>  
            <Typography sx={{ mt: 2, mb: 1 }}>  
              All steps completed - you&apos;re finished  
            </Typography>  
            <Box sx={{ display: "flex", flexDirection: "row", pt: 2 }}>  
              <Box sx={{ flex: "1 1 auto" }} />  
              <Button onClick={handleReset}>Reset</Button>  
            </Box>  
          </React.Fragment>  
        ) : (  
          <React.Fragment>  
            
            <Box sx={{ display: "flex", flexDirection: "row", pt: 2 }}>  
              <Button  
                color="inherit"  
                disabled={activeStep === 0}  
                onClick={handleBack}  
                sx={{ mr: 1 }}  
              >  
                Back  
              </Button>  
              <Box sx={{ flex: "1 1 auto" }} />  
              <Button onClick={handleNext}>  
                  {activeStep === steps.length - 1 ? "Finish" : "Next"}  
              </Button>  
            </Box>  

            <div>

            </div>

          </React.Fragment>  
        )}  
      </Box>  
    </div>  
  );  
}